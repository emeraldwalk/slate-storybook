{
  "name": "Path",
  "methods": [
    {
      "name": "ancestors",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Get a list of ancestor paths for a given path.",
        "",
        "The paths are sorted from deepest to shallowest ancestor. However, if the",
        "`reverse: true` option is passed, they are reversed."
      ],
      "returnValue": {
        "type": "Path[]"
      }
    },
    {
      "name": "common",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the common ancestor path of two paths."
      ],
      "returnValue": {
        "type": "Path"
      }
    },
    {
      "name": "compare",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Compare a path to another, returning an integer indicating whether the path",
        "was before, at, or after the other.",
        "",
        "Note: Two paths of unequal length can still receive a `0` result if one is",
        "directly above or below the other. If you want exact matching, use",
        "[[Path.equals]] instead."
      ],
      "returnValue": {
        "type": "0 | 1 | -1"
      }
    },
    {
      "name": "endsAfter",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path ends after one of the indexes in another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "endsAt",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path ends at one of the indexes in another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "endsBefore",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path ends before one of the indexes in another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "equals",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is exactly equal to another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isAfter",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is after another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isAncestor",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is an ancestor of another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isBefore",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is before another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isChild",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is a child of another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isCommon",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is equal to or an ancestor of another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isDescendant",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is a descendant of another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isParent",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is the parent of another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isPath",
      "args": [
        {
          "name": "value",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": [
        "Check is a value implements the `Path` interface."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isSibling",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a path is a sibling of another."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "levels",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Get a list of paths at every level down to a path. Note: this is the same",
        "as `Path.ancestors`, but including the path itself.",
        "",
        "The paths are sorted from shallowest to deepest. However, if the `reverse:",
        "true` option is passed, they are reversed."
      ],
      "returnValue": {
        "type": "Path[]"
      }
    },
    {
      "name": "next",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Given a path, get the path to the next sibling node."
      ],
      "returnValue": {
        "type": "Path"
      }
    },
    {
      "name": "parent",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Given a path, return a new path referring to the parent node above it."
      ],
      "returnValue": {
        "type": "Path"
      }
    },
    {
      "name": "previous",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Given a path, get the path to the previous sibling node."
      ],
      "returnValue": {
        "type": "Path"
      }
    },
    {
      "name": "relative",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "ancestor",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get a path relative to an ancestor."
      ],
      "returnValue": {
        "type": "Path"
      }
    },
    {
      "name": "transform",
      "args": [
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "operation",
          "isOptional": false,
          "type": "Operation"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "affinity",
              "isOptional": true,
              "type": "\"forward\" | \"backward\""
            }
          ]
        }
      ],
      "documentation": [
        "Transform a path by an operation."
      ],
      "returnValue": {
        "type": "Path"
      }
    }
  ]
}
