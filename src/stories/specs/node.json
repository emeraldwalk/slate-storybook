{
  "name": "Node",
  "methods": [
    {
      "name": "ancestor",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the node at a specific path, asserting that it's an ancestor node."
      ],
      "returnValue": {
        "type": "Ancestor"
      }
    },
    {
      "name": "ancestors",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Return a generator of all the ancestor nodes above a specific path.",
        "",
        "By default the order is bottom-up, from lowest to highest ancestor in",
        "the tree, but you can pass the `reverse: true` option to go top-down."
      ],
      "returnValue": {
        "type": "Generator<NodeEntry<Ancestor>, void, undefined>"
      }
    },
    {
      "name": "child",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "index",
          "isOptional": false,
          "type": "number"
        }
      ],
      "documentation": [
        "Get the child of a node at a specific index."
      ],
      "returnValue": {
        "type": "Descendant"
      }
    },
    {
      "name": "children",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Iterate over the children of a node at a specific path."
      ],
      "returnValue": {
        "type": "Generator<NodeEntry<Descendant>, void, undefined>"
      }
    },
    {
      "name": "common",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "another",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get an entry for the common ancesetor node of two paths."
      ],
      "returnValue": {
        "type": "NodeEntry<Node>"
      }
    },
    {
      "name": "descendant",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the node at a specific path, asserting that it's a descendant node."
      ],
      "returnValue": {
        "type": "Descendant"
      }
    },
    {
      "name": "descendants",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "from",
              "isOptional": true,
              "type": "Path"
            },
            {
              "name": "to",
              "isOptional": true,
              "type": "Path"
            },
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            },
            {
              "name": "pass",
              "isOptional": true,
              "type": "(node: NodeEntry<Node>) => boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Return a generator of all the descendant node entries inside a root node."
      ],
      "returnValue": {
        "type": "Generator<NodeEntry<Descendant>, void, undefined>"
      }
    },
    {
      "name": "elements",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "from",
              "isOptional": true,
              "type": "Path"
            },
            {
              "name": "to",
              "isOptional": true,
              "type": "Path"
            },
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            },
            {
              "name": "pass",
              "isOptional": true,
              "type": "(node: NodeEntry<Node>) => boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Return a generator of all the element nodes inside a root node. Each iteration",
        "will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the",
        "root node is an element it will be included in the iteration as well."
      ],
      "returnValue": {
        "type": "Generator<ElementEntry, void, undefined>"
      }
    },
    {
      "name": "first",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the first node entry in a root node from a path."
      ],
      "returnValue": {
        "type": "NodeEntry<Node>"
      }
    },
    {
      "name": "fragment",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "range",
          "isOptional": false,
          "type": "Range"
        }
      ],
      "documentation": [
        "Get the sliced fragment represented by a range inside a root node."
      ],
      "returnValue": {
        "type": "Descendant[]"
      }
    },
    {
      "name": "get",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the descendant node referred to by a specific path. If the path is an",
        "empty array, it refers to the root node itself."
      ],
      "returnValue": {
        "type": "Node"
      }
    },
    {
      "name": "has",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Check if a descendant node exists at a specific path."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isNode",
      "args": [
        {
          "name": "value",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": [
        "Check if a value implements the `Node` interface."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "isNodeList",
      "args": [
        {
          "name": "value",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": [
        "Check if a value is a list of `Node` objects."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "last",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the last node entry in a root node from a path."
      ],
      "returnValue": {
        "type": "NodeEntry<Node>"
      }
    },
    {
      "name": "leaf",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the node at a specific path, ensuring it's a leaf text node."
      ],
      "returnValue": {
        "type": "Text"
      }
    },
    {
      "name": "levels",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Return a generator of the in a branch of the tree, from a specific path.",
        "",
        "By default the order is top-down, from lowest to highest node in the tree,",
        "but you can pass the `reverse: true` option to go bottom-up."
      ],
      "returnValue": {
        "type": "Generator<NodeEntry<Node>, void, undefined>"
      }
    },
    {
      "name": "matches",
      "args": [
        {
          "name": "node",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "props",
          "isOptional": false,
          "type": "Partial<Editor> | Partial<Element> | Partial<Text>"
        }
      ],
      "documentation": [
        "Check if a node matches a set of props."
      ],
      "returnValue": {
        "type": "boolean"
      }
    },
    {
      "name": "nodes",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node",
          "comment": "The root node"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "from",
              "isOptional": true,
              "type": "Path",
              "comment": "Node path to start from. Defaults to the root node"
            },
            {
              "name": "to",
              "isOptional": true,
              "type": "Path",
              "comment": "Node path to end with"
            },
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean",
              "comment": "If true, iterate nodes in reverse"
            },
            {
              "name": "pass",
              "isOptional": true,
              "type": "(entry: NodeEntry<Node>) => boolean",
              "comment": "Skip any `[Node, Path]` tuples that match the given predicate function"
            }
          ]
        }
      ],
      "documentation": [
        "Return a generator of all the node entries of a root node. Each entry is",
        "returned as a `[Node, Path]` tuple, with the path referring to the node's",
        "position inside the root node."
      ],
      "returnValue": {
        "type": "Generator<NodeEntry<Node>, void, undefined>",
        "comment": "A generator that yields `[Node, Path]` tuples"
      }
    },
    {
      "name": "parent",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "path",
          "isOptional": false,
          "type": "Path"
        }
      ],
      "documentation": [
        "Get the parent of a node at a specific path."
      ],
      "returnValue": {
        "type": "Ancestor"
      }
    },
    {
      "name": "string",
      "args": [
        {
          "name": "node",
          "isOptional": false,
          "type": "Node"
        }
      ],
      "documentation": [
        "Get the concatenated text string of a node's content.",
        "",
        "Note that this will not include spaces or line breaks between block nodes.",
        "It is not a user-facing string, but a string for performing offset-related",
        "computations for a node."
      ],
      "returnValue": {
        "type": "string"
      }
    },
    {
      "name": "texts",
      "args": [
        {
          "name": "root",
          "isOptional": false,
          "type": "Node"
        },
        {
          "name": "options",
          "isOptional": true,
          "args": [
            {
              "name": "from",
              "isOptional": true,
              "type": "Path"
            },
            {
              "name": "to",
              "isOptional": true,
              "type": "Path"
            },
            {
              "name": "reverse",
              "isOptional": true,
              "type": "boolean"
            },
            {
              "name": "pass",
              "isOptional": true,
              "type": "(node: NodeEntry<Node>) => boolean"
            }
          ]
        }
      ],
      "documentation": [
        "Return a generator of all leaf text nodes in a root node."
      ],
      "returnValue": {
        "type": "Generator<NodeEntry<Text>, void, undefined>"
      }
    }
  ]
}
